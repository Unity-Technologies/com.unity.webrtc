diff -uprN M112/android/gyp/compile_java.py M107/android/gyp/compile_java.py
--- M112/android/gyp/compile_java.py	2023-04-06 10:49:06.257903639 +0900
+++ M107/android/gyp/compile_java.py	2023-03-29 16:02:28.108000000 +0900
@@ -625,6 +625,15 @@ def _ParseOptions(argv):
       '--generated-dir',
       help='Subdirectory within target_gen_dir to place extracted srcjars and '
       'annotation processor output for codesearch to find.')
+  parser.add_option(
+      '--bootclasspath',
+      action='append',
+      default=[],
+      help='Boot classpath for javac. If this is specified multiple times, '
+      'they will all be appended to construct the classpath.')
+  parser.add_option(
+      '--java-version',
+      help='Java language version to use in -source and -target args to javac.')
   parser.add_option('--classpath', action='append', help='Classpath to use.')
   parser.add_option(
       '--processorpath',
@@ -686,6 +695,7 @@ def _ParseOptions(argv):
   options, args = parser.parse_args(argv)
   build_utils.CheckOptions(options, parser, required=('jar_path', ))
 
+  options.bootclasspath = build_utils.ParseGnList(options.bootclasspath)
   options.classpath = build_utils.ParseGnList(options.classpath)
   options.processorpath = build_utils.ParseGnList(options.processorpath)
   options.java_srcjars = build_utils.ParseGnList(options.java_srcjars)
@@ -737,10 +747,6 @@ def main(argv):
 
   javac_args = [
       '-g',
-      # We currently target JDK 11 everywhere, since Mockito is broken by JDK17.
-      # See crbug.com/1409661 for more details.
-      '--release',
-      '11',
       # Chromium only allows UTF8 source files.  Being explicit avoids
       # javac pulling a default encoding from the user's environment.
       '-encoding',
@@ -773,22 +779,6 @@ def main(argv):
           '-XepPatchChecks:,' + ','.join(ERRORPRONE_CHECKS_TO_APPLY)
       ]
 
-    # These are required to use JDK 16, and are taken directly from
-    # https://errorprone.info/docs/installation
-    javac_args += [
-        '-J--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
-        '-J--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
-        '-J--add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
-        '-J--add-exports=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
-        '-J--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
-        '-J--add-exports=jdk.compiler/com.sun.tools.javac.processing='
-        'ALL-UNNAMED',
-        '-J--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
-        '-J--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
-        '-J--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
-        '-J--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
-    ]
-
     javac_args += ['-XDcompilePolicy=simple', ' '.join(errorprone_flags)]
 
     # This flag quits errorprone after checks and before code generation, since
@@ -797,12 +787,31 @@ def main(argv):
     if not ERRORPRONE_CHECKS_TO_APPLY:
       javac_args += ['-XDshould-stop.ifNoError=FLOW']
 
+  if options.java_version:
+    javac_args.extend([
+        '-source',
+        options.java_version,
+        '-target',
+        options.java_version,
+    ])
+  if options.java_version == '1.8':
+    # Android's boot jar doesn't contain all java classes.
+    options.bootclasspath.append(build_utils.RT_JAR_PATH)
+
   # This effectively disables all annotation processors, even including
   # annotation processors in service provider configuration files named
   # META-INF/. See the following link for reference:
   #     https://docs.oracle.com/en/java/javase/11/tools/javac.html
   javac_args.extend(['-proc:none'])
 
+  if options.bootclasspath:
+    # if we are targeting source code higher than java 8, we cannot use
+    # -bootclasspath anymore (deprecated). Instead just prepend the classpath.
+    if options.java_version != '1.8':
+      options.classpath = options.bootclasspath + options.classpath
+    else:
+      javac_args.extend(['-bootclasspath', ':'.join(options.bootclasspath)])
+
   if options.processorpath:
     javac_args.extend(['-processorpath', ':'.join(options.processorpath)])
   if options.processor_args:
@@ -811,7 +820,8 @@ def main(argv):
 
   javac_args.extend(options.javac_arg)
 
-  classpath_inputs = options.classpath + options.processorpath
+  classpath_inputs = (
+      options.bootclasspath + options.classpath + options.processorpath)
 
   depfile_deps = classpath_inputs
   # Files that are already inputs in GN should go in input_paths.

diff -uprN M112/android/gyp/turbine.py M107/android/gyp/turbine.py
--- M112/android/gyp/turbine.py	2023-04-06 10:49:06.277903639 +0900
+++ M107/android/gyp/turbine.py	2023-03-29 16:02:28.161000000 +0900
@@ -34,6 +34,15 @@ def main(argv):
       action='append',
       default=[],
       help='List of srcjars to include in compilation.')
+  parser.add_argument(
+      '--bootclasspath',
+      action='append',
+      default=[],
+      help='Boot classpath for javac. If this is specified multiple times, '
+      'they will all be appended to construct the classpath.')
+  parser.add_argument(
+      '--java-version',
+      help='Java language version to use in -source and -target args to javac.')
   parser.add_argument('--classpath', action='append', help='Classpath to use.')
   parser.add_argument(
       '--processors',
@@ -60,6 +69,7 @@ def main(argv):
                       help='Kotlin jar to be merged into the output jar.')
   options, unknown_args = parser.parse_known_args(argv)
 
+  options.bootclasspath = build_utils.ParseGnList(options.bootclasspath)
   options.classpath = build_utils.ParseGnList(options.classpath)
   options.processorpath = build_utils.ParseGnList(options.processorpath)
   options.processors = build_utils.ParseGnList(options.processors)
@@ -79,11 +89,7 @@ def main(argv):
   cmd = build_utils.JavaCmd() + [
       '-classpath', options.turbine_jar_path, 'com.google.turbine.main.Main'
   ]
-  javac_cmd = [
-      # We currently target JDK 11 everywhere.
-      '--release',
-      '11',
-  ]
+  javac_cmd = []
 
   # Turbine reads lists from command line args by consuming args until one
   # starts with double dash (--). Thus command line args should be grouped
@@ -92,6 +98,22 @@ def main(argv):
     cmd += ['--processors']
     cmd += options.processors
 
+  if options.java_version:
+    javac_cmd.extend([
+        '-source',
+        options.java_version,
+        '-target',
+        options.java_version,
+    ])
+  if options.java_version == '1.8':
+    # Android's boot jar doesn't contain all java classes.
+    options.bootclasspath.append(build_utils.RT_JAR_PATH)
+
+  if options.bootclasspath:
+    cmd += ['--bootclasspath']
+    for bootclasspath in options.bootclasspath:
+      cmd += bootclasspath.split(':')
+
   if options.processorpath:
     cmd += ['--processorpath']
     cmd += options.processorpath
@@ -118,9 +140,10 @@ def main(argv):
     cmd += ['--sources']
     cmd += ['@' + files_rsp_path]
 
-  cmd += ['--javacopts']
-  cmd += javac_cmd
-  cmd += ['--']  # Terminate javacopts
+  if javac_cmd:
+    cmd.append('--javacopts')
+    cmd += javac_cmd
+    cmd.append('--')  # Terminate javacopts
 
   # Use AtomicOutput so that output timestamps are not updated when outputs
   # are not changed.
@@ -149,8 +172,8 @@ def main(argv):
   if options.depfile:
     # GN already knows of the java files, so avoid listing individual java files
     # in the depfile.
-    depfile_deps = (options.classpath + options.processorpath +
-                    options.java_srcjars)
+    depfile_deps = (options.bootclasspath + options.classpath +
+                    options.processorpath + options.java_srcjars)
     build_utils.WriteDepfile(options.depfile, options.jar_path, depfile_deps)
 
 
diff -uprN M112/android/gyp/util/build_utils.py M107/android/gyp/util/build_utils.py
--- M112/android/gyp/util/build_utils.py	2023-04-06 10:49:06.287903639 +0900
+++ M107/android/gyp/util/build_utils.py	2023-03-29 16:02:28.163000000 +0900
@@ -39,10 +39,8 @@ JAVAC_PATH = os.path.join(JAVA_HOME, 'bi
 JAVAP_PATH = os.path.join(JAVA_HOME, 'bin', 'javap')
 KOTLIN_HOME = os.path.join(DIR_SOURCE_ROOT, 'third_party', 'kotlinc', 'current')
 KOTLINC_PATH = os.path.join(KOTLIN_HOME, 'bin', 'kotlinc')
-# Please avoid using this. Our JAVA_HOME is using a newer and actively patched
-# JDK.
-JAVA_11_HOME_DEPRECATED = os.path.join(DIR_SOURCE_ROOT, 'third_party', 'jdk11',
-                                       'current')
+RT_JAR_PATH = os.path.join(DIR_SOURCE_ROOT, 'third_party', 'jdk', 'extras',
+                           'java_8', 'jre', 'lib', 'rt.jar')
 
 try:
   string_types = basestring
