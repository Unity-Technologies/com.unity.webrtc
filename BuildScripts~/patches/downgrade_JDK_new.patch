diff -uprN M112/android/gyp/compile_java.py M107/android/gyp/compile_java.py
--- M112/android/gyp/compile_java.py	2023-04-06 10:49:06.257903639 +0900
+++ M107/android/gyp/compile_java.py	2023-03-29 16:02:28.108000000 +0900
@@ -625,6 +625,15 @@ def _ParseOptions(argv):
       '--generated-dir',
       help='Subdirectory within target_gen_dir to place extracted srcjars and '
       'annotation processor output for codesearch to find.')
+  parser.add_option(
+      '--bootclasspath',
+      action='append',
+      default=[],
+      help='Boot classpath for javac. If this is specified multiple times, '
+      'they will all be appended to construct the classpath.')
+  parser.add_option(
+      '--java-version',
+      help='Java language version to use in -source and -target args to javac.')
   parser.add_option('--classpath', action='append', help='Classpath to use.')
   parser.add_option(
       '--processorpath',
@@ -686,6 +695,7 @@ def _ParseOptions(argv):
   options, args = parser.parse_args(argv)
   build_utils.CheckOptions(options, parser, required=('jar_path', ))
 
+  options.bootclasspath = build_utils.ParseGnList(options.bootclasspath)
   options.classpath = build_utils.ParseGnList(options.classpath)
   options.processorpath = build_utils.ParseGnList(options.processorpath)
   options.java_srcjars = build_utils.ParseGnList(options.java_srcjars)
@@ -737,10 +747,6 @@ def main(argv):
 
   javac_args = [
       '-g',
-      # We currently target JDK 11 everywhere, since Mockito is broken by JDK17.
-      # See crbug.com/1409661 for more details.
-      '--release',
-      '11',
       # Chromium only allows UTF8 source files.  Being explicit avoids
       # javac pulling a default encoding from the user's environment.
       '-encoding',
@@ -773,22 +779,6 @@ def main(argv):
           '-XepPatchChecks:,' + ','.join(ERRORPRONE_CHECKS_TO_APPLY)
       ]
 
-    # These are required to use JDK 16, and are taken directly from
-    # https://errorprone.info/docs/installation
-    javac_args += [
-        '-J--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
-        '-J--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
-        '-J--add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
-        '-J--add-exports=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
-        '-J--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
-        '-J--add-exports=jdk.compiler/com.sun.tools.javac.processing='
-        'ALL-UNNAMED',
-        '-J--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
-        '-J--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
-        '-J--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
-        '-J--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
-    ]
-
     javac_args += ['-XDcompilePolicy=simple', ' '.join(errorprone_flags)]
 
     # This flag quits errorprone after checks and before code generation, since
@@ -797,12 +787,31 @@ def main(argv):
     if not ERRORPRONE_CHECKS_TO_APPLY:
       javac_args += ['-XDshould-stop.ifNoError=FLOW']
 
+  if options.java_version:
+    javac_args.extend([
+        '-source',
+        options.java_version,
+        '-target',
+        options.java_version,
+    ])
+  if options.java_version == '1.8':
+    # Android's boot jar doesn't contain all java classes.
+    options.bootclasspath.append(build_utils.RT_JAR_PATH)
+
   # This effectively disables all annotation processors, even including
   # annotation processors in service provider configuration files named
   # META-INF/. See the following link for reference:
   #     https://docs.oracle.com/en/java/javase/11/tools/javac.html
   javac_args.extend(['-proc:none'])
 
+  if options.bootclasspath:
+    # if we are targeting source code higher than java 8, we cannot use
+    # -bootclasspath anymore (deprecated). Instead just prepend the classpath.
+    if options.java_version != '1.8':
+      options.classpath = options.bootclasspath + options.classpath
+    else:
+      javac_args.extend(['-bootclasspath', ':'.join(options.bootclasspath)])
+
   if options.processorpath:
     javac_args.extend(['-processorpath', ':'.join(options.processorpath)])
   if options.processor_args:
@@ -811,7 +820,8 @@ def main(argv):
 
   javac_args.extend(options.javac_arg)
 
-  classpath_inputs = options.classpath + options.processorpath
+  classpath_inputs = (
+      options.bootclasspath + options.classpath + options.processorpath)
 
   depfile_deps = classpath_inputs
   # Files that are already inputs in GN should go in input_paths.

diff -uprN M112/android/gyp/dex.py M107/android/gyp/dex.py
--- M112/android/gyp/dex.py	2023-04-07 10:51:37.738992181 +0900
+++ M112/android/gyp/dex.py	2023-04-13 10:41:40.815853525 +0900
@@ -105,6 +105,8 @@ def _ParseArgs(args):
       '--bootclasspath',
       action='append',
       help='GN-list of bootclasspath. Needed for --desugar')
+  parser.add_argument(
+      '--desugar-jdk-libs-json', help='Path to desugar_jdk_libs.json.')
   parser.add_argument('--show-desugar-default-interface-warnings',
                       action='store_true',
                       help='Enable desugaring warnings.')
@@ -507,6 +509,9 @@ def main(args):
     input_paths += options.bootclasspath
 
 
+  if options.desugar_jdk_libs_json:
+    dex_cmd += ['--desugared-lib', options.desugar_jdk_libs_json]
+    input_paths += [options.desugar_jdk_libs_json]
   if options.assertion_handler:
     dex_cmd += ['--force-assertions-handler:' + options.assertion_handler]
   if options.force_enable_assertions:
diff -uprN M112/android/gyp/dex_jdk_libs.py M107/android/gyp/dex_jdk_libs.py
--- M112/android/gyp/dex_jdk_libs.py	1970-01-01 09:00:00.000000000 +0900
+++ M107/android/gyp/dex_jdk_libs.py	2023-04-13 09:50:32.835879935 +0900
@@ -0,0 +1,93 @@
+#!/usr/bin/env python3
+#
+# Copyright 2020 The Chromium Authors
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+import argparse
+import os
+import shutil
+import subprocess
+import sys
+import zipfile
+
+from util import build_utils
+
+
+def _ParseArgs(args):
+  args = build_utils.ExpandFileArgs(args)
+  parser = argparse.ArgumentParser()
+
+  parser.add_argument('--output', required=True, help='Dex output path.')
+  parser.add_argument('--r8-path', required=True, help='Path to R8 jar.')
+  parser.add_argument(
+      '--desugar-jdk-libs-json', help='Path to desugar_jdk_libs.json.')
+  parser.add_argument(
+      '--desugar-jdk-libs-jar', help='Path to desugar_jdk_libs.jar.')
+  parser.add_argument('--desugar-jdk-libs-configuration-jar',
+                      help='Path to desugar_jdk_libs_configuration.jar.')
+  parser.add_argument('--min-api', help='minSdkVersion', required=True)
+  parser.add_argument('--warnings-as-errors',
+                      action='store_true',
+                      help='Treat all warnings as errors.')
+  options = parser.parse_args(args)
+  return options
+
+
+def DexJdkLibJar(r8_path,
+                 min_api,
+                 desugar_jdk_libs_json,
+                 desugar_jdk_libs_jar,
+                 desugar_jdk_libs_configuration_jar,
+                 output,
+                 warnings_as_errors,
+                 config_paths=None):
+  # TODO(agrieve): Spews a lot of stderr about missing classes.
+  with build_utils.TempDir() as tmp_dir:
+    cmd = build_utils.JavaCmd(warnings_as_errors) + [
+        '-cp',
+        r8_path,
+        'com.android.tools.r8.L8',
+        '--min-api',
+        min_api,
+        '--lib',
+        build_utils.JAVA_HOME,
+        '--desugared-lib',
+        desugar_jdk_libs_json,
+    ]
+
+    # If no desugaring is required, no keep rules are generated, and the keep
+    # file will not be created.
+    if config_paths is not None:
+      for path in config_paths:
+        cmd += ['--pg-conf', path]
+
+    cmd += [
+        '--output', tmp_dir, desugar_jdk_libs_jar,
+        desugar_jdk_libs_configuration_jar
+    ]
+
+    build_utils.CheckOutput(cmd,
+                            print_stdout=False,
+                            fail_on_output=warnings_as_errors)
+    if os.path.exists(os.path.join(tmp_dir, 'classes2.dex')):
+      raise Exception('Achievement unlocked: desugar_jdk_libs is multidex!')
+
+    # classes.dex might not exists if the "desugar_jdk_libs_jar" is not used
+    # at all.
+    if os.path.exists(os.path.join(tmp_dir, 'classes.dex')):
+      shutil.move(os.path.join(tmp_dir, 'classes.dex'), output)
+      return True
+    return False
+
+
+def main(args):
+  options = _ParseArgs(args)
+  DexJdkLibJar(options.r8_path, options.min_api, options.desugar_jdk_libs_json,
+               options.desugar_jdk_libs_jar,
+               options.desugar_jdk_libs_configuration_jar, options.output,
+               options.warnings_as_errors)
+
+
+if __name__ == '__main__':
+  main(sys.argv[1:])

diff -uprN M112/android/gyp/dex_jdk_libs.pydeps M107/android/gyp/dex_jdk_libs.pydeps
--- M112/android/gyp/dex_jdk_libs.pydeps	1970-01-01 09:00:00.000000000 +0900
+++ M107/android/gyp/dex_jdk_libs.pydeps	2023-04-13 09:54:35.835877843 +0900
@@ -0,0 +1,6 @@
+# Generated by running:
+#   build/print_python_deps.py --root build/android/gyp --output build/android/gyp/dex_jdk_libs.pydeps build/android/gyp/dex_jdk_libs.py
+../../gn_helpers.py
+dex_jdk_libs.py
+util/__init__.py
+util/build_utils.py

diff -uprN M112/android/gyp/turbine.py M107/android/gyp/turbine.py
--- M112/android/gyp/turbine.py	2023-04-06 10:49:06.277903639 +0900
+++ M107/android/gyp/turbine.py	2023-03-29 16:02:28.161000000 +0900
@@ -34,6 +34,15 @@ def main(argv):
       action='append',
       default=[],
       help='List of srcjars to include in compilation.')
+  parser.add_argument(
+      '--bootclasspath',
+      action='append',
+      default=[],
+      help='Boot classpath for javac. If this is specified multiple times, '
+      'they will all be appended to construct the classpath.')
+  parser.add_argument(
+      '--java-version',
+      help='Java language version to use in -source and -target args to javac.')
   parser.add_argument('--classpath', action='append', help='Classpath to use.')
   parser.add_argument(
       '--processors',
@@ -60,6 +69,7 @@ def main(argv):
                       help='Kotlin jar to be merged into the output jar.')
   options, unknown_args = parser.parse_known_args(argv)
 
+  options.bootclasspath = build_utils.ParseGnList(options.bootclasspath)
   options.classpath = build_utils.ParseGnList(options.classpath)
   options.processorpath = build_utils.ParseGnList(options.processorpath)
   options.processors = build_utils.ParseGnList(options.processors)
@@ -79,11 +89,7 @@ def main(argv):
   cmd = build_utils.JavaCmd() + [
       '-classpath', options.turbine_jar_path, 'com.google.turbine.main.Main'
   ]
-  javac_cmd = [
-      # We currently target JDK 11 everywhere.
-      '--release',
-      '11',
-  ]
+  javac_cmd = []
 
   # Turbine reads lists from command line args by consuming args until one
   # starts with double dash (--). Thus command line args should be grouped
@@ -92,6 +98,22 @@ def main(argv):
     cmd += ['--processors']
     cmd += options.processors
 
+  if options.java_version:
+    javac_cmd.extend([
+        '-source',
+        options.java_version,
+        '-target',
+        options.java_version,
+    ])
+  if options.java_version == '1.8':
+    # Android's boot jar doesn't contain all java classes.
+    options.bootclasspath.append(build_utils.RT_JAR_PATH)
+
+  if options.bootclasspath:
+    cmd += ['--bootclasspath']
+    for bootclasspath in options.bootclasspath:
+      cmd += bootclasspath.split(':')
+
   if options.processorpath:
     cmd += ['--processorpath']
     cmd += options.processorpath
@@ -118,9 +140,10 @@ def main(argv):
     cmd += ['--sources']
     cmd += ['@' + files_rsp_path]
 
-  cmd += ['--javacopts']
-  cmd += javac_cmd
-  cmd += ['--']  # Terminate javacopts
+  if javac_cmd:
+    cmd.append('--javacopts')
+    cmd += javac_cmd
+    cmd.append('--')  # Terminate javacopts
 
   # Use AtomicOutput so that output timestamps are not updated when outputs
   # are not changed.
@@ -149,8 +172,8 @@ def main(argv):
   if options.depfile:
     # GN already knows of the java files, so avoid listing individual java files
     # in the depfile.
-    depfile_deps = (options.classpath + options.processorpath +
-                    options.java_srcjars)
+    depfile_deps = (options.bootclasspath + options.classpath +
+                    options.processorpath + options.java_srcjars)
     build_utils.WriteDepfile(options.depfile, options.jar_path, depfile_deps)
 
 
diff -uprN M112/android/gyp/util/build_utils.py M107/android/gyp/util/build_utils.py
--- M112/android/gyp/util/build_utils.py	2023-04-06 10:49:06.287903639 +0900
+++ M107/android/gyp/util/build_utils.py	2023-03-29 16:02:28.163000000 +0900
@@ -39,10 +39,8 @@ JAVAC_PATH = os.path.join(JAVA_HOME, 'bi
 JAVAP_PATH = os.path.join(JAVA_HOME, 'bin', 'javap')
 KOTLIN_HOME = os.path.join(DIR_SOURCE_ROOT, 'third_party', 'kotlinc', 'current')
 KOTLINC_PATH = os.path.join(KOTLIN_HOME, 'bin', 'kotlinc')
-# Please avoid using this. Our JAVA_HOME is using a newer and actively patched
-# JDK.
-JAVA_11_HOME_DEPRECATED = os.path.join(DIR_SOURCE_ROOT, 'third_party', 'jdk11',
-                                       'current')
+RT_JAR_PATH = os.path.join(DIR_SOURCE_ROOT, 'third_party', 'jdk', 'extras',
+                           'java_8', 'jre', 'lib', 'rt.jar')
 
 try:
   string_types = basestring
diff -uprN M112/config/android/config.gni M107/config/android/config.gni
--- M112/config/android/config.gni	2023-04-07 10:51:37.798992180 +0900
+++ M107/config/android/config.gni	2023-04-13 09:20:28.535895467 +0900
@@ -278,6 +278,10 @@ if (is_android || is_chromeos) {
     # Enables JNI multiplexing to reduce JNI native methods overhead.
     allow_jni_multiplexing = false
 
+    # Enables Java library desugaring.
+    # This will cause an extra classes.dex file to appear in every apk.
+    enable_jdk_library_desugaring = true
+
     # Enables trace event injection on Android views with bytecode rewriting.
     # This adds an additional step on android_app_bundle_module targets that
     # adds trace events to some methods in android.view.View subclasses.
diff -uprN M112/config/android/internal_rules.gni M107/config/android/internal_rules.gni
--- M112/config/android/internal_rules.gni	2023-04-06 10:49:06.337903638 +0900
+++ M107/config/android/internal_rules.gni.patch	2023-04-06 12:14:06.647866312 +0900
@@ -99,6 +99,9 @@ _r8_path = "//third_party/r8/lib/r8.jar"
 # and unnecessarily slows down all bots.
 _d8_path = "//third_party/r8/d8/lib/r8.jar"
 _custom_d8_path = "//third_party/r8/custom_d8.jar"
+_desugar_jdk_libs_json = "//third_party/r8/desugar_jdk_libs.json"
+_desugar_jdk_libs_jar = "//third_party/android_deps/libs/com_android_tools_desugar_jdk_libs/desugar_jdk_libs-1.1.5.jar"
+_desugar_jdk_libs_configuration_jar = "//third_party/android_deps/libs/com_android_tools_desugar_jdk_libs_configuration/desugar_jdk_libs_configuration-1.1.5.jar"
 _default_lint_jar_path = "//third_party/android_build_tools/lint/lint.jar"
 _custom_lint_jar_path = "//third_party/android_build_tools/lint/custom_lint.jar"
 _manifest_merger_jar_path =
@@ -1256,6 +1259,38 @@ if (enable_java_templates) {
       _args += [ "--disable-checks" ]
     }
 
+    if (defined(invoker.is_static_library) && invoker.is_static_library) {
+      _args += [
+        "--extra-mapping-output-paths",
+        "@FileArg($_rebased_build_config:deps_info:static_library_proguard_mapping_output_paths)",
+      ]
+    }
+
+    if (_enable_jdk_library_desugaring) {
+      _args += [
+        "--desugar-jdk-libs-json",
+        rebase_path(_desugar_jdk_libs_json, root_build_dir),
+      ]
+      _inputs += [ _desugar_jdk_libs_json ]
+
+      _args += [
+        "--desugar-jdk-libs-jar",
+        rebase_path(_desugar_jdk_libs_jar, root_build_dir),
+        "--desugar-jdk-libs-configuration-jar",
+        rebase_path(_desugar_jdk_libs_configuration_jar, root_build_dir),
+      ]
+      _inputs += [
+        _desugar_jdk_libs_jar,
+        _desugar_jdk_libs_configuration_jar,
+      ]
+
+      _desugared_library_keep_rule_output_path =
+          "$target_gen_dir/$target_name.desugared_library_keep_rules.flags"
+      _args += [
+        "--desugared-library-keep-rule-output",
+        rebase_path(_desugared_library_keep_rule_output_path, root_build_dir),
+      ]
+    }
     _ignore_desugar_missing_deps =
         defined(invoker.ignore_desugar_missing_deps) &&
         invoker.ignore_desugar_missing_deps
@@ -1655,6 +1690,14 @@ if (enable_java_templates) {
         if (_enable_desugar) {
           args += [ "--desugar" ]
 
+          # Passing the flag for dex merging causes invalid dex files to be created.
+          if (enable_jdk_library_desugaring && !_is_dex_merging) {
+            inputs += [ _desugar_jdk_libs_json ]
+            args += [
+              "--desugar-jdk-libs-json",
+              rebase_path(_desugar_jdk_libs_json, root_build_dir),
+            ]
+          }
           _ignore_desugar_missing_deps =
               defined(invoker.ignore_desugar_missing_deps) &&
               invoker.ignore_desugar_missing_deps
@@ -1699,6 +1742,16 @@ if (enable_java_templates) {
               "--classpath=@FileArg($_rebased_build_config:deps_info:javac_full_interface_classpath)",
             ]
           }
+
+          if (defined(invoker.final_ijar_path)) {
+            # Need to include the input .interface.jar on the classpath in order to make
+            # jar_excluded_patterns classes visible to desugar.
+            args += [
+              "--classpath",
+              rebase_path(invoker.final_ijar_path, root_build_dir),
+            ]
+            inputs += [ invoker.final_ijar_path ]
+          }
         }
 
         if (defined(invoker.custom_assertion_handler)) {
@@ -1715,6 +1768,38 @@ if (enable_java_templates) {
     }
   }
 
+  # Variables
+  #   output: Path to output ".l8.dex".
+  #   min_sdk_version: The minimum Android SDK version this target supports.
+  template("dex_jdk_libs") {
+    action_with_pydeps(target_name) {
+      script = "//build/android/gyp/dex_jdk_libs.py"
+      inputs = [
+        _r8_path,
+        _desugar_jdk_libs_json,
+        _desugar_jdk_libs_jar,
+        _desugar_jdk_libs_configuration_jar,
+      ]
+      outputs = [ invoker.output ]
+      args = [
+        "--r8-path",
+        rebase_path(_r8_path, root_build_dir),
+        "--desugar-jdk-libs-json",
+        rebase_path(_desugar_jdk_libs_json, root_build_dir),
+        "--desugar-jdk-libs-jar",
+        rebase_path(_desugar_jdk_libs_jar, root_build_dir),
+        "--desugar-jdk-libs-configuration-jar",
+        rebase_path(_desugar_jdk_libs_configuration_jar, root_build_dir),
+        "--output",
+        rebase_path(invoker.output, root_build_dir),
+        "--min-api=${invoker.min_sdk_version}",
+      ]
+      if (treat_warnings_as_errors) {
+        args += [ "--warnings-as-errors" ]
+      }
+    }
+  }
+
   template("jacoco_instr") {
     action_with_pydeps(target_name) {
       forward_variables_from(invoker,
@@ -3005,6 +3090,9 @@ if (enable_java_templates) {
         ]
       }
 
+      if (invoker.supports_android || invoker.use_turbine) {
+        args += [ "--java-version=1.8" ]
+      }
       if (use_java_goma) {
         args += [ "--gomacc-path=$goma_dir/gomacc" ]
 
@@ -3795,6 +3883,7 @@ if (enable_java_templates) {
               target_sources_file = _target_sources_file
             }
             chromium_code = _chromium_code
+            supports_android = _supports_android
             include_android_sdk = _is_robolectric || _requires_android
           }
         }
@@ -4024,8 +4113,8 @@ if (enable_java_templates) {
           if (enable_desugar) {
             # Desugaring with D8 requires full classpath.
             build_config = _build_config
-            unprocessed_jar_path = _unprocessed_jar_path
-            deps += _header_classpath_deps + _unprocessed_jar_deps
+            final_ijar_path = _final_ijar_path
+            deps += _header_classpath_deps + [ ":$_header_target_name" ]
           }
 
           enable_multidex = false
@@ -4063,7 +4152,10 @@ if (enable_java_templates) {
         if (defined(invoker.wrapper_script_name)) {
           script_name = invoker.wrapper_script_name
         }
-        deps = [ ":$_build_config_target_name" ]
+        deps = [
+          ":$_build_config_target_name",
+          "//third_party/jdk:java_data",
+        ]
         if (_is_robolectric) {
           # For robolectric tests, we also add the normal sdk jar to the
           # classpath since whenever we start using a new Android SDK,
