diff --git a/android/gyp/compile_java.py b/android/gyp/compile_java.py
index 7953731c7..acb7e973e 100755
--- a/android/gyp/compile_java.py
+++ b/android/gyp/compile_java.py
@@ -600,7 +600,16 @@ def _ParseOptions(argv):
       '--generated-dir',
       help='Subdirectory within target_gen_dir to place extracted srcjars and '
       'annotation processor output for codesearch to find.')
-  parser.add_option('--classpath', action='append', help='Classpath to use.')
+  parser.add_option(
+      '--bootclasspath',
+      action='append',
+      default=[],
+      help='Boot classpath for javac. If this is specified multiple times, '
+      'they will all be appended to construct the classpath.')
+  parser.add_option(
+      '--java-version',
+      help='Java language version to use in -source and -target args to javac.')
+  parser.add_option('--classpath', action='append', help='Classpath to use.')
   parser.add_option(
       '--processorpath',
       action='append',
@@ -657,6 +666,7 @@ def _ParseOptions(argv):
   options, args = parser.parse_args(argv)
   build_utils.CheckOptions(options, parser, required=('jar_path', ))
 
+  options.bootclasspath = build_utils.ParseGnList(options.bootclasspath)
   options.classpath = build_utils.ParseGnList(options.classpath)
   options.processorpath = build_utils.ParseGnList(options.processorpath)
   options.java_srcjars = build_utils.ParseGnList(options.java_srcjars)
@@ -700,9 +710,6 @@ def main(argv):
 
   javac_args = [
       '-g',
-      # We currently target JDK 11 everywhere.
-      '--release',
-      '11',
       # Chromium only allows UTF8 source files.  Being explicit avoids
       # javac pulling a default encoding from the user's environment.
       '-encoding',
@@ -711,9 +718,6 @@ def main(argv):
       # See: http://blog.ltgt.net/most-build-tools-misuse-javac/
       '-sourcepath',
       ':',
-      # protobuf-generated files fail this check (javadoc has @deprecated,
-      # but method missing @Deprecated annotation).
-      '-Xlint:-dep-ann',
   ]
 
   if options.enable_errorprone:
@@ -743,12 +747,31 @@ def main(argv):
     if not ERRORPRONE_CHECKS_TO_APPLY:
       javac_args += ['-XDshould-stop.ifNoError=FLOW']
 
+  if options.java_version:
+    javac_args.extend([
+        '-source',
+        options.java_version,
+        '-target',
+        options.java_version,
+    ])
+  if options.java_version == '1.8':
+    # Android's boot jar doesn't contain all java classes.
+    options.bootclasspath.append(build_utils.RT_JAR_PATH)
+
   # This effectively disables all annotation processors, even including
   # annotation processors in service provider configuration files named
   # META-INF/. See the following link for reference:
   #     https://docs.oracle.com/en/java/javase/11/tools/javac.html
   javac_args.extend(['-proc:none'])
 
+  if options.bootclasspath:
+    # if we are targeting source code higher than java 8, we cannot use
+    # -bootclasspath anymore (deprecated). Instead just prepend the classpath.
+    if options.java_version != '1.8':
+      options.classpath = options.bootclasspath + options.classpath
+    else:
+      javac_args.extend(['-bootclasspath', ':'.join(options.bootclasspath)])
+
   if options.processorpath:
     javac_args.extend(['-processorpath', ':'.join(options.processorpath)])
   if options.processor_args:
@@ -757,7 +780,8 @@ def main(argv):
 
   javac_args.extend(options.javac_arg)
 
-  classpath_inputs = options.classpath + options.processorpath
+  classpath_inputs = (
+      options.bootclasspath + options.classpath + options.processorpath)
 
   depfile_deps = classpath_inputs
   # Files that are already inputs in GN should go in input_paths.
diff --git a/android/gyp/turbine.py b/android/gyp/turbine.py
index 61935a6de..432c3cac7 100755
--- a/android/gyp/turbine.py
+++ b/android/gyp/turbine.py
@@ -33,6 +33,15 @@ def main(argv):
       action='append',
       default=[],
       help='List of srcjars to include in compilation.')
+  parser.add_argument(
+      '--bootclasspath',
+      action='append',
+      default=[],
+      help='Boot classpath for javac. If this is specified multiple times, '
+      'they will all be appended to construct the classpath.')
+  parser.add_argument(
+      '--java-version',
+      help='Java language version to use in -source and -target args to javac.')
   parser.add_argument('--classpath', action='append', help='Classpath to use.')
   parser.add_argument(
       '--processors',
@@ -57,6 +66,7 @@ def main(argv):
                       help='Treat all warnings as errors.')
   options, unknown_args = parser.parse_known_args(argv)
 
+  options.bootclasspath = build_utils.ParseGnList(options.bootclasspath)
   options.classpath = build_utils.ParseGnList(options.classpath)
   options.processorpath = build_utils.ParseGnList(options.processorpath)
   options.processors = build_utils.ParseGnList(options.processors)
@@ -71,11 +81,7 @@ def main(argv):
   cmd = build_utils.JavaCmd(options.warnings_as_errors) + [
       '-classpath', options.turbine_jar_path, 'com.google.turbine.main.Main'
   ]
-  javac_cmd = [
-      # We currently target JDK 11 everywhere.
-      '--release',
-      '11',
-  ]
+  javac_cmd = []
 
   # Turbine reads lists from command line args by consuming args until one
   # starts with double dash (--). Thus command line args should be grouped
@@ -84,6 +90,22 @@ def main(argv):
     cmd += ['--processors']
     cmd += options.processors
 
+  if options.java_version:
+    javac_cmd.extend([
+        '-source',
+        options.java_version,
+        '-target',
+        options.java_version,
+    ])
+  if options.java_version == '1.8':
+    # Android's boot jar doesn't contain all java classes.
+    options.bootclasspath.append(build_utils.RT_JAR_PATH)
+
+  if options.bootclasspath:
+    cmd += ['--bootclasspath']
+    for bootclasspath in options.bootclasspath:
+      cmd += bootclasspath.split(':')
+
   if options.processorpath:
     cmd += ['--processorpath']
     cmd += options.processorpath
@@ -110,9 +132,10 @@ def main(argv):
     cmd += ['--sources']
     cmd += ['@' + files_rsp_path]
 
-  cmd += ['--javacopts']
-  cmd += javac_cmd
-  cmd += ['--']  # Terminate javacopts
+  if javac_cmd:
+    cmd.append('--javacopts')
+    cmd += javac_cmd
+    cmd.append('--')  # Terminate javacopts
 
   # Use AtomicOutput so that output timestamps are not updated when outputs
   # are not changed.
@@ -136,8 +159,8 @@ def main(argv):
   if options.depfile:
     # GN already knows of the java files, so avoid listing individual java files
     # in the depfile.
-    depfile_deps = (options.classpath + options.processorpath +
-                    options.java_srcjars)
+    depfile_deps = (options.bootclasspath + options.classpath +
+                    options.processorpath + options.java_srcjars)
     build_utils.WriteDepfile(options.depfile, options.jar_path, depfile_deps)
 
 
diff --git a/android/gyp/util/build_utils.py b/android/gyp/util/build_utils.py
index af19f14fb..b5784c0ab 100644
--- a/android/gyp/util/build_utils.py
+++ b/android/gyp/util/build_utils.py
@@ -37,6 +37,8 @@ DIR_SOURCE_ROOT = os.path.relpath(
 JAVA_HOME = os.path.join(DIR_SOURCE_ROOT, 'third_party', 'jdk', 'current')
 JAVAC_PATH = os.path.join(JAVA_HOME, 'bin', 'javac')
 JAVAP_PATH = os.path.join(JAVA_HOME, 'bin', 'javap')
+RT_JAR_PATH = os.path.join(DIR_SOURCE_ROOT, 'third_party', 'jdk', 'extras',
+                           'java_8', 'jre', 'lib', 'rt.jar')
 
 try:
   string_types = basestring
diff --git a/config/android/internal_rules.gni b/config/android/internal_rules.gni
index 822116480..2c576b9c2 100644
--- a/config/android/internal_rules.gni
+++ b/config/android/internal_rules.gni
@@ -1714,19 +1714,6 @@ if (enable_java_templates) {
           }
         }
         if (_desugar_needs_classpath) {
-          if (defined(invoker.unprocessed_jar_path)) {
-            # Cannot use header jar for the active jar, because it does not
-            # contain anonymous classes. https://crbug.com/1342018#c5
-            # Cannot use processed .jar here because it might have classes
-            # filtered out via jar_excluded_patterns.
-            # Must come first in classpath in order to take precedence over
-            # deps that defined the same classes (via jar_excluded_patterns).
-            args += [
-              "--classpath",
-              rebase_path(invoker.unprocessed_jar_path, root_build_dir),
-            ]
-            inputs += [ invoker.unprocessed_jar_path ]
-          }
           _desugar_dependencies_path =
               "$target_gen_dir/$target_name.desugardeps"
           args += [
@@ -1743,6 +1730,15 @@ if (enable_java_templates) {
                 rebase_path(invoker.desugar_jars_paths, root_build_dir)
             args += [ "--classpath=${_rebased_desugar_jars_paths}" ]
           }
+          if (defined(invoker.final_ijar_path)) {
+            # Need to include the input .interface.jar on the classpath in order to make
+            # jar_excluded_patterns classes visible to desugar.
+            args += [
+              "--classpath",
+              rebase_path(invoker.final_ijar_path, root_build_dir),
+            ]
+            inputs += [ invoker.final_ijar_path ]
+          }
         } else {
           not_needed(invoker, [ "desugar_jars_paths" ])
         }
@@ -3048,11 +3044,6 @@ if (enable_java_templates) {
         get_label_info(":${target_name}", "label_no_toolchain"),
       ]
 
-      # SDK jar must be first on classpath.
-      if (invoker.include_android_sdk) {
-        args += [ "--classpath=@FileArg($_rebased_build_config:android:sdk_interface_jars)" ]
-      }
-
       if (defined(invoker.header_jar_path)) {
         inputs += [ invoker.header_jar_path ]
         args += [
@@ -3090,6 +3081,9 @@ if (enable_java_templates) {
         ]
       }
 
+      if (invoker.supports_android || invoker.use_turbine) {
+        args += [ "--java-version=1.8" ]
+      }
       if (use_java_goma) {
         args += [ "--gomacc-path=$goma_dir/gomacc" ]
 
@@ -3102,6 +3096,9 @@ if (enable_java_templates) {
       if (enable_kythe_annotations && !invoker.enable_errorprone) {
         args += [ "--enable-kythe-annotations" ]
       }
+      if (invoker.include_android_sdk) {
+        args += [ "--bootclasspath=@FileArg($_rebased_build_config:android:sdk_interface_jars)" ]
+      }
       if (_chromium_code) {
         args += [ "--chromium-code=1" ]
         if (treat_warnings_as_errors) {
@@ -3771,6 +3768,7 @@ if (enable_java_templates) {
               java_sources_file = _java_sources_file
             }
             chromium_code = _chromium_code
+            supports_android = _supports_android
             include_android_sdk = _is_robolectric || _requires_android
           }
         }
@@ -3987,8 +3985,8 @@ if (enable_java_templates) {
           if (enable_desugar) {
             # Desugaring with D8 requires full classpath.
             build_config = _build_config
-            unprocessed_jar_path = _unprocessed_jar_path
-            deps += _header_classpath_deps + _unprocessed_jar_deps
+            final_ijar_path = _final_ijar_path
+            deps += _header_classpath_deps + [ ":$_header_target_name" ]
           }
 
           enable_multidex = false
