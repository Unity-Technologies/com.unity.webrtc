{% metadata_file .yamato/package.metafile %}

test_targets:
  - name: win
    type: Unity::VM
    image: package-ci/win10:v1.21.0-1103459
    flavor: b1.large
    is_gpu: false
    gfx_types:
      - name: d3d11
        extra-editor-arg: force-d3d11
      - name: d3d12
        extra-editor-arg: force-d3d12
      - name: vulkan
        extra-editor-arg: force-vulkan
    test_params:
      - backend: mono
        platform: editmode
      - backend: mono
        platform: playmode
      - backend: mono
        platform: standalone
      - backend: il2cpp
        platform: standalone
  - name: linux
    type: Unity::VM
    image: package-ci/ubuntu-20.04:v1.4.0-1235639
    flavor: b1.large
    is_gpu: false
    gfx_types:
      - name: glcore
        extra-editor-arg: force-glcore
      - name: vulkan
        extra-editor-arg: force-vulkan
    test_params:
      - backend: mono
        platform: editmode
      - backend: mono
        platform: playmode
      - backend: mono
        platform: standalone
      - backend: il2cpp
        platform: standalone
  - name: win-gpu
    type: Unity::VM::GPU
    image: package-ci/win10:v4.0.0-1214578
    flavor: b1.large
    model: rtx2080
    is_gpu: true
    gfx_types:
      - name: d3d11
        extra-editor-arg: force-d3d11
      - name: d3d12
        extra-editor-arg: force-d3d12
      - name: vulkan
        extra-editor-arg: force-vulkan
    test_params:
      - backend: mono
        platform: editmode
      - backend: mono
        platform: playmode
      - backend: mono
        platform: standalone
      - backend: il2cpp
        platform: standalone
  - name: linux-gpu
    type: Unity::VM::GPU
    image: renderstreaming/ubuntu:v0.3.1-1262597
    flavor: b1.large
    model: rtx2080
    is_gpu: true
    gfx_types:
      - name: glcore
        extra-editor-arg: force-glcore
      - name: vulkan
        extra-editor-arg: force-vulkan    
    test_params:
      - backend: mono
        platform: editmode
      - backend: mono
        platform: playmode
      - backend: mono
        platform: standalone
      - backend: il2cpp
        platform: standalone
  - name: macos
    type: Unity::metal::macmini
    image: package-ci/macos-12:v4.10.0-1271191
    flavor: m1.mac
    architecture: x64
    gfx_types:
      - name: metal
        extra-editor-arg: force-metal
    test_params:
      - backend: mono
        utr-backend: Mono2X
        additional_component_arg: StandaloneSupport-Mono
        platform: editmode
      - backend: mono
        utr-backend: Mono2X
        additional_component_arg: StandaloneSupport-Mono
        platform: playmode
      - backend: mono
        utr-backend: Mono2X
        additional_component_arg: StandaloneSupport-Mono
        platform: standalone
      - backend: il2cpp
        utr-backend: Il2Cpp
        additional_component_arg: StandaloneSupport-IL2CPP
        platform: standalone
  - name: macos-m1
    type: Unity::metal::devkit
    image: package-ci/macos-12:v4.10.0-1271191
    flavor: m1.mac
    architecture: arm64
    gfx_types:
      - name: metal
        extra-editor-arg: force-metal
    test_params:
      - backend: mono
        utr-backend: Mono2X
        additional_component_arg: StandaloneSupport-Mono
        platform: editmode
      - backend: mono
        utr-backend: Mono2X
        additional_component_arg: StandaloneSupport-Mono
        platform: playmode
      - backend: mono
        utr-backend: Mono2X
        additional_component_arg: StandaloneSupport-Mono
        platform: standalone
      - backend: il2cpp
        utr-backend: Il2Cpp
        additional_component_arg: StandaloneSupport-IL2CPP
        platform: standalone

test_targets_android:
  - name: vulkan
    playergraphicsapi: Vulkan
    extra-editor-arg: vulkan
  - name: opengles3
    playergraphicsapi: OpenGLES3
    extra-editor-arg: gles3

test_architectures_macos:
  - name: x64
    target_name: macos
    editor_version: 2020.3
    architecture: x64
  - name: x64 (Rosetta 2)
    target_name: macos-m1
    editor_version: 2020.3
    architecture: x64
  - name: x64
    target_name: macos
    editor_version: 2021.3
    architecture: x64
  - name: x64 (Rosetta 2)
    target_name: macos-m1
    editor_version: 2021.3
    architecture: x64
  - name: arm64 (Apple Silicon)
    target_name: macos-m1
    editor_version: 2021.3
    architecture: arm64
  - name: x64
    target_name: macos
    editor_version: 2022.1
    architecture: x64
  - name: x64 (Rosetta 2)
    target_name: macos-m1
    editor_version: 2022.1
    architecture: x64
  - name: arm64 (Apple Silicon)
    target_name: macos-m1
    editor_version: 2022.1
    architecture: arm64
  - name: x64
    target_name: macos
    editor_version: trunk
    architecture: x64
  - name: x64 (Rosetta 2)
    target_name: macos-m1
    editor_version: trunk
    architecture: x64
  - name: arm64 (Apple Silicon)
    target_name: macos-m1
    editor_version: trunk
    architecture: arm64    

package:
  name: webrtc
  packagename: com.unity.webrtc
---

pack_{{ package.name }}:
  name: Pack {{ package.packagename }}
  agent:
    type: Unity::VM
    image: package-ci/ubuntu-20.04:v4.4.0-1252344
    flavor: b1.large
  commands:
    - npm install upm-ci-utils@{{ upm.package_version }} -g --registry {{ upm.registry_url }}
    - upm-ci package pack  
  artifacts:
    {{ package.name }}_package:  
      paths:
        - "upm-ci~/packages/**/*"
  dependencies:
    {% for platform in plugin_platforms %}
    - .yamato/nativeplugin.yml#build_{{ platform }}
    {% endfor %}

{% for editor in editors %}
build_{{ package.name }}_{{ editor.version }}_ios:
  name : Build {{ package.packagename }} with {{ editor.version }} for ios device
  agent:
    type: Unity::VM::osx
    image: package-ci/macos-12:v4.10.0-1271191
    flavor: b1.large
  commands:
    - |
      find upm-ci~/packages/ -name "*.tgz" | xargs -I file tar xvf file -C upm-ci~
      cp -rf upm-ci~/package/Runtime/Plugins Runtime/
    - pip install unity-downloader-cli --index-url https://artifactory.prd.it.unity3d.com/artifactory/api/pypi/pypi/simple
    - unity-downloader-cli -c Editor -c iOS -u {{ editor.version }} --fast -w
    - curl -s https://artifactory.prd.it.unity3d.com/artifactory/unity-tools/utr-standalone/utr --output utr
    - chmod +x ./utr
    - ./utr --suite=playmode --platform=iOS --editor-location=.Editor --testproject=WebRTC~ --player-save-path=build/players --architecture=arm64 --artifacts_path=build/logs --build-only
  artifacts:
    players:
      paths:
        - "build/players/**"
    logs:
      paths:
        - "build/logs/**"
  dependencies:
    - .yamato/upm-ci-{{ package.name }}-packages.yml#pack_{{ package.name }}

test_{{ package.name }}_{{ editor.version }}_ios:
  name: Test {{ package.packagename }} with {{ editor.version }} on ios device
  agent:
    type: Unity::mobile::iPhone
    image: package-ci/macos-12:v4.10.0-1271191
    model: SE
    flavor: b1.medium
  skip_checkout: true
  dependencies:
    - .yamato/upm-ci-{{ package.name }}-packages.yml#build_{{ package.name }}_{{ editor.version }}_ios
  commands:
    # Download standalone UnityTestRunner
    - curl -s https://artifactory.prd.it.unity3d.com/artifactory/unity-tools-local/utr-standalone/utr --output utr
    # Give UTR execution permissions
    - chmod +x ./utr
    # Run the test build on the device
    - ./utr --suite=playmode --platform=iOS --player-load-path=build/players --artifacts_path=build/test-results
  artifacts:
    logs:
      paths:
        - "build/test-results/**"

{% for target in test_targets_android %}
build_{{ package.name }}_{{ editor.version }}_android_{{ target.name }}:
  name : Build {{ package.packagename }} with {{ editor.version }} for android device {{ target.name }}
  agent:
    type: Unity::VM::osx
    image: package-ci/macos-12:v4.10.0-1271191
    flavor: b1.xlarge
  commands:
    - |
      find upm-ci~/packages/ -name "*.tgz" | xargs -I file tar xvf file -C upm-ci~
      cp -rf upm-ci~/package/Runtime/Plugins Runtime/
{% if target.name == "vulkan" -%}
      cp -f WebRTC~/ProjectSettings/ProjectSettings-android-vulkan.asset WebRTC~/ProjectSettings/ProjectSettings.asset
{% endif %}
    - pip install unity-downloader-cli --index-url https://artifactory.prd.it.unity3d.com/artifactory/api/pypi/pypi/simple
    - unity-downloader-cli -c Editor -c Android -u {{ editor.version }} --fast -w
    - curl -s https://artifactory.prd.it.unity3d.com/artifactory/unity-tools/utr-standalone/utr --output utr
    - chmod +x ./utr
    - ./utr --suite=playmode --platform=Android --editor-location=.Editor --testproject=WebRTC~ --player-save-path=build/players --architecture=arm64 --artifacts_path=build/logs --scripting-backend=il2cpp --build-only
  artifacts:
    players:
      paths:
        - "build/players/**"
    logs:
      paths:
        - "build/logs/**"
  dependencies:
    - .yamato/upm-ci-{{ package.name }}-packages.yml#pack_{{ package.name }}

test_{{ package.name }}_{{ editor.version }}_android_{{ target.name }}:
  name: Test {{ package.packagename }} with {{ editor.version }} on android device {{ target.name }}
  agent:
    type: Unity::mobile::shield
    image: mobile/android-package-ci-win:v0.1.4-1212670
    flavor: b1.medium
  skip_checkout: true
  dependencies:
    - .yamato/upm-ci-{{ package.name }}-packages.yml#build_{{ package.name }}_{{ editor.version }}_android_{{ target.name }}
  commands:
    - wget http://artifactory-slo.bf.unity3d.com/artifactory/mobile-generic/android/ADBKeys.zip!/adbkey.pub -O %USERPROFILE%/.android/adbkey.pub
    - wget http://artifactory-slo.bf.unity3d.com/artifactory/mobile-generic/android/ADBKeys.zip!/adbkey -O %USERPROFILE%/.android/adbkey
    - |
       # Download standalone UnityTestRunner
       curl -s https://artifactory.prd.it.unity3d.com/artifactory/unity-tools/utr-standalone/utr.bat --output utr.bat
       # Set the IP of the device. In case device gets lost, UTR will try to recconect to ANDROID_DEVICE_CONNECTION
       set ANDROID_DEVICE_CONNECTION=%BOKKEN_DEVICE_IP%
       # Establish an ADB connection with the device
       start %ANDROID_SDK_ROOT%\platform-tools\adb.exe connect %BOKKEN_DEVICE_IP%
       # List the connected devices
       start %ANDROID_SDK_ROOT%\platform-tools\adb.exe devices
       NetSh Advfirewall set allprofiles state off
       ./utr --suite=playmode --platform=android --player-load-path=build/players --artifacts_path=build/test-results
  artifacts:
    logs:
      paths:
        - "build/test-results/**"
{% endfor %}
{% endfor %}

{% for target in test_targets %}
{% for editor in editors %}
{% for param in target.test_params %}
{% for gfx_type in target.gfx_types %}
{% if target.name != "macos" and target.name != "macos-m1" %}
test_{{ package.name }}_{{ param.platform }}_{{ param.backend }}_{{ target.name }}_{{ editor.version }}_{{ gfx_type.name }}:
  name : Test {{ package.packagename }} with {{ param.platform }} {{ param.backend }} {{ editor.version }} on {{ target.name }} {{ gfx_type.name }}
  agent:
    type: {{ target.type }}
    image: {{ target.image }}
    flavor: {{ target.flavor }}
{% if target.is_gpu == "true" and target.model %}
    model: {{ target.model }}
{% endif %}    
  commands:
    - pip config set global.index-url https://artifactory.prd.it.unity3d.com/artifactory/api/pypi/pypi/simple
    - pip install unity-downloader-cli --index-url https://artifactory.prd.it.unity3d.com/artifactory/api/pypi/pypi/simple
    - npm install upm-ci-utils@{{ upm.package_version }} -g --registry {{ upm.registry_url }}
    - upm-ci package test -u {{ editor.version }} --platform {{ param.platform }} --backend {{ param.backend }} --extra-editor-arg {{ gfx_type.extra-editor-arg }} --enable-load-and-test-isolation
  artifacts:
    {{ package.name }}_{{ param.backend }}_{{ editor.version }}_{{ target.name }}_test_results: 
      paths:
        - "upm-ci~/test-results/**/*"
  dependencies:
    - .yamato/upm-ci-{{ package.name }}-packages.yml#pack_{{ package.name }}

{% elsif param.platform == "standalone" %}

# build standalone runtime for testing on macOS(Intel/Silicon)
build_{{ package.name }}_{{ param.platform }}_{{ param.backend }}_{{ target.name }}_{{ editor.version }}_{{ gfx_type.name }}:
  name : Build {{ package.packagename }} with {{ param.platform }} {{ param.backend }} {{ editor.version }} on {{ target.name }} {{ gfx_type.name }}
  agent:
    type: Unity::VM::osx
    image: package-ci/macos-12:v4.10.0-1271191
    flavor: m1.mac
  commands:
    - |
      find upm-ci~/packages/ -name "*.tgz" | xargs -I file tar xvf file -C upm-ci~
      cp -rf upm-ci~/package/Runtime/Plugins Runtime/
    - pip install unity-downloader-cli --index-url https://artifactory.prd.it.unity3d.com/artifactory/api/pypi/pypi/simple
    - unity-downloader-cli -c Editor -c {{ param.additional_component_arg }} -u {{ editor.version }} --fast -w
    - curl -s https://artifactory.prd.it.unity3d.com/artifactory/unity-tools/utr-standalone/utr --output utr
    - chmod +x ./utr
    - ./utr --suite=playmode --platform=StandaloneOSX --editor-location=.Editor --testproject=WebRTC~ --player-save-path=build/players --artifacts_path=build/logs --scripting-backend={{ param.utr-backend }} --extra-editor-arg="-nographics" --build-only
  artifacts:
    players:
      paths:
        - "build/players/**"
    logs:
      paths:
        - "build/logs/**"
  dependencies:
    - .yamato/upm-ci-{{ package.name }}-packages.yml#pack_{{ package.name }}

# standalone test on macOS(Intel/Silicon)
{% assign architectures = test_architectures_macos | where: "editor_version", editor.version | where: "target_name", target.name %}
{% for architecture in architectures %}

test_{{ package.name }}_{{ param.platform }}_{{ param.backend }}_{{ target.name }}_{{ editor.version }}_{{ architecture.architecture }}_{{ gfx_type.name }}:
  name : Test {{ package.packagename }} with {{ param.platform }} {{ param.backend }} {{ editor.version }} on {{ target.name }} {{ architecture.name }} {{ gfx_type.name }}
  agent:
    type: {{ target.type }}
    image: {{ target.image }}
    flavor: {{ target.flavor }}
  variables:
    TEMPLATE_FILE: BuildScripts~/template/remote.sh.template
    PACKAGE_DIR: com.unity.webrtc
    PLAYER_LOAD_PATH: build/players
    TEST_RESULT_DIR: upm-ci~/test-results/
    TEST_TARGET: macos
    TEST_PLATFORM: {{ param.platform }}
    TEST_ARCHITECTURE : {{ target.architecture }}
    SCRIPTING_BACKEND: {{ param.backend }}  
    EDITOR_VERSION: {{ editor.version }}
    EXTRA_EDITOR_ARG: {{ gfx_type.extra-editor-arg }}
  commands:
    - BuildScripts~/test_package_mac.sh
  artifacts:
    {{ package.name }}_{{ param.backend }}_{{ editor.version }}_{{ target.name }}_test_results: 
      paths:
        - "upm-ci~/test-results/**"
  dependencies:
    - .yamato/upm-ci-{{ package.name }}-packages.yml#build_{{ package.name }}_{{ param.platform }}_{{ param.backend }}_{{ target.name }}_{{ editor.version }}_{{ gfx_type.name }}

# end standalone test on macOS(Intel/Silicon)
{% endfor %}

{% else %}

# editmode/playmode test on macOS(Intel/Silicon)
{% assign architectures = test_architectures_macos | where: "editor_version", editor.version | where: "target_name", target.name %}
{% for architecture in architectures %}

test_{{ package.name }}_{{ param.platform }}_{{ param.backend }}_{{ target.name }}_{{ editor.version }}_{{ architecture.architecture }}_{{ gfx_type.name }}:
  name : Test {{ package.packagename }} with {{ param.platform }} {{ param.backend }} {{ editor.version }} on {{ target.name }} {{ architecture.name }} {{ gfx_type.name }}
  agent:
    type: {{ target.type }}
    image: {{ target.image }}
    flavor: {{ target.flavor }}
  variables:
      TEMPLATE_FILE: BuildScripts~/template/remote.sh.template
      PACKAGE_DIR: com.unity.webrtc
      TEST_PROJECT_DIR: com.unity.webrtc/WebRTC~
      TEST_RESULT_DIR: upm-ci~/test-results/
      TEST_TARGET: macos
      TEST_PLATFORM: {{ param.platform }}
      TEST_ARCHITECTURE : {{ architecture.architecture }}
      SCRIPTING_BACKEND: {{ param.backend }}
      EDITOR_VERSION: {{ editor.version }}
      EXTRA_EDITOR_ARG: {{ gfx_type.extra-editor-arg }}
  commands:
    - |
      find upm-ci~/packages/ -name "*.tgz" | xargs -I file tar xvf file -C upm-ci~
      cp -rf upm-ci~/package/Runtime/Plugins Runtime/
    - BuildScripts~/test_package_mac.sh
  artifacts:
    {{ package.name }}_{{ param.backend }}_{{ editor.version }}_{{ target.name }}_test_results: 
      paths:
        - "upm-ci~/test-results/**"
  dependencies:
    - .yamato/upm-ci-{{ package.name }}-packages.yml#pack_{{ package.name }}

# end editmode/playmode test on macOS(Intel/Silicon)
{% endfor %}

{% endif %}
{% endfor %}
{% endfor %}
{% endfor %}
{% endfor %}

trigger_pullrequest:
  name : Trigger by the Pull requests which directs to main branch or feature branch
  dependencies:
    - .yamato/upm-ci-{{ package.name }}-packages.yml#test_{{ package.name }}_{{ editor_version_for_trigger }}_gpu
    - .yamato/nativeplugin.yml#test_all_platform
    - .yamato/format.yml#check_code_format_nativeplugin
  triggers:
    expression: pull_request.target eq "main" OR pull_request.target match "feat/.*"

trigger_package_validate:
  name : Trigger test for package validation
  dependencies:
    - .yamato/upm-ci-{{ package.name }}-packages.yml#test_{{ package.name }}_editmode_mono_win_{{ editor_version_for_validate }}_d3d11


{% for editor in editors %}
trigger_test_{{ package.name }}_{{ editor.version }}_gpu:
  name : Trigger test {{ package.packagename }} {{ editor.version }} all platforms with GPU
  dependencies:
    - .yamato/upm-ci-{{ package.name }}-packages.yml#test_{{ package.name }}_{{ editor.version }}_gpu

test_{{ package.name }}_{{ editor.version }}_nogpu:
  name : Test {{ package.packagename }} {{ editor.version }} all platforms without GPU
  dependencies:
    - .yamato/upm-ci-{{ package.name }}-packages.yml#test_{{ package.name }}_{{ editor.version }}_ios
{% for target in test_targets_android %}
    - .yamato/upm-ci-{{ package.name }}-packages.yml#test_{{ package.name }}_{{ editor.version }}_android_{{ target.name }}
{% endfor %}
{% for target in test_targets %}
{% for param in target.test_params %}
{% for gfx_type in target.gfx_types %}
# vulkan and d3d12 gfx device is not supported on VMs without GPU
{% if target.is_gpu == "false" and gfx_type.name != "vulkan" and gfx_type.name != "d3d12" %}
    - .yamato/upm-ci-{{ package.name }}-packages.yml#test_{{ package.name }}_{{ param.platform }}_{{ param.backend }}_{{ target.name }}_{{ editor.version }}_{{ gfx_type.name }}
{% endif %}
{% endfor %}
{% endfor %}
{% endfor %}

test_{{ package.name }}_{{ editor.version }}_gpu:
  name : Test {{ package.packagename }} {{ editor.version }} all platforms with GPU
  dependencies:
    - .yamato/upm-ci-{{ package.name }}-packages.yml#test_{{ package.name }}_{{ editor.version }}_ios
{% for target in test_targets_android %}
    - .yamato/upm-ci-{{ package.name }}-packages.yml#test_{{ package.name }}_{{ editor.version }}_android_{{ target.name }}
{% endfor %}
{% for target in test_targets %}
{% for param in target.test_params %}
{% for gfx_type in target.gfx_types %}
{% if target.name == "macos" or target.name == "macos-m1" %}
{% assign architectures = test_architectures_macos | where: "editor_version", editor.version | where: "target_name", target.name %}
{% for architecture in architectures %}
    - .yamato/upm-ci-{{ package.name }}-packages.yml#test_{{ package.name }}_{{ param.platform }}_{{ param.backend }}_{{ target.name }}_{{ editor.version }}_{{ architecture.architecture }}_{{ gfx_type.name }}
{% endfor %}
{% elsif target.is_gpu == "true" %}
# workaround: avoid playmode linux glcore
{% if target.name == "linux-gpu" and gfx_type.name == "glcore" and param.platform == "playmode" %}
{% else %}
    - .yamato/upm-ci-{{ package.name }}-packages.yml#test_{{ package.name }}_{{ param.platform }}_{{ param.backend }}_{{ target.name }}_{{ editor.version }}_{{ gfx_type.name }}
{% endif %}
{% endif %}
{% endfor %}
{% endfor %}
{% endfor %}

{% endfor %}

publish_{{ package.name }}:
  name: Publish {{ package.packagename }}
  agent:
    type: Unity::VM
    image: package-ci/win10:v1.20.1-1032259
    flavor: b1.large
  variables:
    UPMCI_ENABLE_PACKAGE_SIGNING: 1
  commands:
    - npm install upm-ci-utils@{{ upm.package_version }} -g --registry {{ upm.registry_url }}
    - upm-ci package publish
  artifacts:  
    {{ package.name }}_artifacts.zip:
      paths:
        - "upm-ci~/packages/*.tgz"
  dependencies:
    - .yamato/upm-ci-{{ package.name }}-packages.yml#pack_{{ package.name }}
    {% for editor in editors %}
    - .yamato/upm-ci-{{ package.name }}-packages.yml#test_{{ package.name }}_editmode_mono_linux_{{ editor.version }}_glcore
    - .yamato/upm-ci-{{ package.name }}-packages.yml#test_{{ package.name }}_editmode_mono_win_{{ editor.version }}_d3d11
    {% endfor %}
    - .yamato/nativeplugin.yml#test_all_platform
    - .yamato/upm-ci-{{ package.name }}-packages.yml#test_{{ package.name }}_{{ editor_version_for_trigger }}_gpu
#    - .yamato/upm-ci-{{ package.name }}-packages.yml#test_{{ package.name }}_{{ editor_version_for_trigger }}_nogpu

publish_dry_run_{{ package.name }}:
  name: Publish Dry Run {{ package.packagename }}
  agent:
    type: Unity::VM
    image: package-ci/win10:v1.20.1-1032259
    flavor: b1.large
  variables:
    UPMCI_ENABLE_PACKAGE_SIGNING: 1
  commands:
    - npm install upm-ci-utils@{{ upm.package_version }} -g --registry {{ upm.registry_url }}
    - upm-ci package publish --dry-run
  triggers:
    tags:
      only:
        - /^(r|R)(c|C)-\d+\.\d+\.\d+(-preview(\.\d+)?)?$/
  artifacts:  
    {{ package.name }}_artifacts.zip:
      paths:
        - "upm-ci~/packages/*.tgz"
  dependencies:
    - .yamato/upm-ci-{{ package.name }}-packages.yml#pack_{{ package.name }}
    {% for editor in editors %}
    - .yamato/upm-ci-{{ package.name }}-packages.yml#test_{{ package.name }}_editmode_mono_linux_{{ editor.version }}_glcore
    - .yamato/upm-ci-{{ package.name }}-packages.yml#test_{{ package.name }}_editmode_mono_win_{{ editor.version }}_d3d11
    {% endfor %}
